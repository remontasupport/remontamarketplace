
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  failedLoginAttempts: 'failedLoginAttempts',
  accountLockedUntil: 'accountLockedUntil',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.WorkerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  mobile: 'mobile',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  age: 'age',
  gender: 'gender',
  genderIdentity: 'genderIdentity',
  languages: 'languages',
  services: 'services',
  supportWorkerCategories: 'supportWorkerCategories',
  experience: 'experience',
  introduction: 'introduction',
  qualifications: 'qualifications',
  hasVehicle: 'hasVehicle',
  funFact: 'funFact',
  hobbies: 'hobbies',
  uniqueService: 'uniqueService',
  whyEnjoyWork: 'whyEnjoyWork',
  additionalInfo: 'additionalInfo',
  photos: 'photos',
  consentProfileShare: 'consentProfileShare',
  consentMarketing: 'consentMarketing',
  profileCompleted: 'profileCompleted',
  isPublished: 'isPublished',
  verificationStatus: 'verificationStatus',
  verificationChecklist: 'verificationChecklist',
  submittedDocuments: 'submittedDocuments',
  verificationSubmittedAt: 'verificationSubmittedAt',
  verificationReviewedAt: 'verificationReviewedAt',
  verificationApprovedAt: 'verificationApprovedAt',
  verificationRejectedAt: 'verificationRejectedAt',
  verificationNotes: 'verificationNotes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationRequirementScalarFieldEnum = {
  id: 'id',
  workerProfileId: 'workerProfileId',
  requirementType: 'requirementType',
  requirementName: 'requirementName',
  isRequired: 'isRequired',
  status: 'status',
  documentUrl: 'documentUrl',
  documentUploadedAt: 'documentUploadedAt',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  approvedAt: 'approvedAt',
  rejectedAt: 'rejectedAt',
  expiresAt: 'expiresAt',
  notes: 'notes',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  mobile: 'mobile',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoordinatorProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  mobile: 'mobile',
  organization: 'organization',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  WORKER: 'WORKER',
  CLIENT: 'CLIENT',
  COORDINATOR: 'COORDINATOR'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  LOCKED: 'LOCKED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  PENDING_REVIEW: 'PENDING_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.RequirementStatus = exports.$Enums.RequirementStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  LOGOUT: 'LOGOUT',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  PASSWORD_RESET_REQUEST: 'PASSWORD_RESET_REQUEST',
  PASSWORD_RESET_SUCCESS: 'PASSWORD_RESET_SUCCESS',
  EMAIL_CHANGE: 'EMAIL_CHANGE',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  ACCOUNT_LOCKED: 'ACCOUNT_LOCKED',
  ACCOUNT_UNLOCKED: 'ACCOUNT_UNLOCKED',
  EMAIL_VERIFIED: 'EMAIL_VERIFIED',
  ROLE_CHANGE: 'ROLE_CHANGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  WorkerProfile: 'WorkerProfile',
  VerificationRequirement: 'VerificationRequirement',
  ClientProfile: 'ClientProfile',
  CoordinatorProfile: 'CoordinatorProfile',
  AuditLog: 'AuditLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\toton\\Desktop\\Remonta\\src\\generated\\auth-client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\toton\\Desktop\\Remonta\\prisma\\auth-schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "AUTH_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ============================================\n// Authentication Database Schema\n// ============================================\n// This schema is for the separate auth database\n// Uses industry best practices for security and performance\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../src/generated/auth-client\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"AUTH_DATABASE_URL\")\n}\n\n// ============================================\n// CORE AUTHENTICATION MODELS\n// ============================================\n\nenum UserRole {\n  WORKER\n  CLIENT\n  COORDINATOR\n}\n\nenum AccountStatus {\n  ACTIVE\n  SUSPENDED\n  LOCKED\n  PENDING_VERIFICATION\n}\n\n// ============================================\n// User Model - Core Authentication\n// ============================================\nmodel User {\n  id           String        @id @default(cuid())\n  email        String        @unique\n  passwordHash String // bcrypt hashed password (never store plain text)\n  role         UserRole\n  status       AccountStatus @default(ACTIVE)\n\n  // Password reset\n  resetPasswordToken   String?   @unique\n  resetPasswordExpires DateTime?\n\n  // Security tracking\n  failedLoginAttempts Int       @default(0)\n  accountLockedUntil  DateTime?\n  lastLoginAt         DateTime?\n  lastLoginIp         String?\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  accounts Account[]\n  sessions Session[]\n\n  // Profile relations (one-to-one, based on role)\n  workerProfile      WorkerProfile?\n  clientProfile      ClientProfile?\n  coordinatorProfile CoordinatorProfile?\n\n  // Audit logs\n  auditLogs AuditLog[]\n\n  // Indexes for performance\n  @@index([email])\n  @@index([status])\n  @@index([role])\n  @@index([resetPasswordToken])\n  @@map(\"users\")\n}\n\n// ============================================\n// NextAuth Required Models\n// ============================================\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.Text\n  access_token      String? @db.Text\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.Text\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n  @@map(\"accounts\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([sessionToken])\n  @@map(\"sessions\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@index([token])\n  @@map(\"verification_tokens\")\n}\n\n// ============================================\n// PROFILE MODELS (Role-Specific Data)\n// ============================================\n\nenum VerificationStatus {\n  NOT_STARTED\n  IN_PROGRESS\n  PENDING_REVIEW\n  APPROVED\n  REJECTED\n}\n\nmodel WorkerProfile {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Personal Information\n  firstName String\n  lastName  String\n  mobile    String\n\n  // Location (with geocoded coordinates for distance search)\n  location   String\n  latitude   Float? // Geocoded latitude for distance calculations\n  longitude  Float? // Geocoded longitude for distance calculations\n  city       String? // Extracted city/suburb from location\n  state      String? // Extracted state from location\n  postalCode String? // Extracted postal code from location\n\n  // Demographics\n  age            String\n  gender         String\n  genderIdentity String\n\n  // Professional Details\n  languages               String[]\n  services                String[]\n  supportWorkerCategories String[]\n  experience              String\n  introduction            String   @db.Text\n\n  // Qualifications\n  qualifications String @db.Text\n  hasVehicle     String\n\n  // Personal Touch\n  funFact        String  @db.Text\n  hobbies        String  @db.Text\n  uniqueService  String  @db.Text\n  whyEnjoyWork   String  @db.Text\n  additionalInfo String? @db.Text\n\n  // Photos (stored as JSON array of URLs)\n  photos Json?\n\n  // Consents\n  consentProfileShare Boolean @default(false)\n  consentMarketing    Boolean @default(false)\n\n  // Profile Status\n  profileCompleted Boolean @default(false)\n  isPublished      Boolean @default(false)\n\n  // ============================================\n  // VERIFICATION TRACKING (Scalable Design)\n  // ============================================\n\n  // Overall verification status\n  verificationStatus VerificationStatus @default(NOT_STARTED)\n\n  // Verification checklist (tracks what's completed)\n  verificationChecklist Json? // { \"police_check\": false, \"wwcc\": false, \"ndis_screening\": false, etc. }\n\n  // Documents submitted (URLs to uploaded documents)\n  submittedDocuments Json? // { \"police_check\": \"url\", \"wwcc\": \"url\", etc. }\n\n  // Verification timestamps\n  verificationSubmittedAt DateTime? // When worker submitted for verification\n  verificationReviewedAt  DateTime? // When admin reviewed\n  verificationApprovedAt  DateTime? // When approved\n  verificationRejectedAt  DateTime? // When rejected\n\n  // Rejection/Notes\n  verificationNotes String? @db.Text // Admin notes or rejection reasons\n\n  // Relations\n  verificationRequirements VerificationRequirement[]\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@index([isPublished])\n  @@index([verificationStatus])\n  @@index([latitude, longitude]) // For distance-based searches\n  @@index([city])\n  @@index([state])\n  @@index([postalCode])\n  @@map(\"worker_profiles\")\n}\n\n// ============================================\n// VERIFICATION REQUIREMENTS MODEL\n// Scalable design for tracking individual requirements\n// ============================================\n\nenum RequirementStatus {\n  PENDING\n  SUBMITTED\n  APPROVED\n  REJECTED\n  EXPIRED\n}\n\nmodel VerificationRequirement {\n  id              String        @id @default(cuid())\n  workerProfileId String\n  workerProfile   WorkerProfile @relation(fields: [workerProfileId], references: [id], onDelete: Cascade)\n\n  // Requirement details\n  requirementType String // e.g., \"police_check\", \"wwcc\", \"ndis_screening\", \"first_aid\"\n  requirementName String // Human-readable name\n  isRequired      Boolean @default(true)\n\n  // Status tracking\n  status RequirementStatus @default(PENDING)\n\n  // Document tracking\n  documentUrl        String? // URL to uploaded document (Vercel Blob)\n  documentUploadedAt DateTime?\n\n  // Verification tracking\n  submittedAt DateTime?\n  reviewedAt  DateTime?\n  reviewedBy  String? // Admin user ID who reviewed\n  approvedAt  DateTime?\n  rejectedAt  DateTime?\n\n  // Expiry tracking (for documents that expire)\n  expiresAt DateTime?\n\n  // Notes\n  notes           String? @db.Text\n  rejectionReason String? @db.Text\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([workerProfileId])\n  @@index([status])\n  @@index([requirementType])\n  @@map(\"verification_requirements\")\n}\n\nmodel ClientProfile {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Personal Information\n  firstName String\n  lastName  String\n  mobile    String\n\n  // Client-specific fields (to be expanded)\n  location String?\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@map(\"client_profiles\")\n}\n\nmodel CoordinatorProfile {\n  id     String @id @default(cuid())\n  userId String @unique\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  // Personal Information\n  firstName String\n  lastName  String\n  mobile    String\n\n  // Coordinator-specific fields (to be expanded)\n  organization String?\n  location     String?\n\n  // Timestamps\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@map(\"coordinator_profiles\")\n}\n\n// ============================================\n// SECURITY & AUDIT MODELS\n// ============================================\n\nenum AuditAction {\n  LOGIN_SUCCESS\n  LOGIN_FAILED\n  LOGOUT\n  PASSWORD_CHANGE\n  PASSWORD_RESET_REQUEST\n  PASSWORD_RESET_SUCCESS\n  EMAIL_CHANGE\n  PROFILE_UPDATE\n  ACCOUNT_LOCKED\n  ACCOUNT_UNLOCKED\n  EMAIL_VERIFIED\n  ROLE_CHANGE\n}\n\nmodel AuditLog {\n  id        String      @id @default(cuid())\n  userId    String?\n  action    AuditAction\n  ipAddress String?\n  userAgent String?\n  metadata  Json? // Additional context (e.g., changed fields)\n  createdAt DateTime    @default(now())\n\n  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)\n\n  @@index([userId])\n  @@index([action])\n  @@index([createdAt])\n  @@map(\"audit_logs\")\n}\n\n// ============================================\n// PRODUCTION OPTIMIZATIONS\n// ============================================\n\n// 1. CUID for IDs (better than UUID for PostgreSQL)\n// 2. Indexes on frequently queried fields\n// 3. Cascade deletes for data integrity\n// 4. @db.Text for long text fields (optimization)\n// 5. Timestamps for all models\n// 6. Unique constraints where needed\n// 7. Email/token indexes for fast lookups\n// 8. Audit logging for security compliance\n// 9. Account status enum for user lifecycle\n// 10. Proper foreign key relationships\n",
  "inlineSchemaHash": "40f0f0995289eab25d62cabc1bedd0ba573fbf5f41b621269a68ef1e3a12eb8c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AccountStatus\"},{\"name\":\"resetPasswordToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resetPasswordExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"failedLoginAttempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"accountLockedUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastLoginIp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"workerProfile\",\"kind\":\"object\",\"type\":\"WorkerProfile\",\"relationName\":\"UserToWorkerProfile\"},{\"name\":\"clientProfile\",\"kind\":\"object\",\"type\":\"ClientProfile\",\"relationName\":\"ClientProfileToUser\"},{\"name\":\"coordinatorProfile\",\"kind\":\"object\",\"type\":\"CoordinatorProfile\",\"relationName\":\"CoordinatorProfileToUser\"},{\"name\":\"auditLogs\",\"kind\":\"object\",\"type\":\"AuditLog\",\"relationName\":\"AuditLogToUser\"}],\"dbName\":\"users\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"accounts\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"sessions\"},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_tokens\"},\"WorkerProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkerProfile\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mobile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"latitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"longitude\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postalCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"age\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"genderIdentity\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"services\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supportWorkerCategories\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"introduction\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"qualifications\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hasVehicle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"funFact\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hobbies\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"uniqueService\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"whyEnjoyWork\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"additionalInfo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"photos\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"consentProfileShare\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"consentMarketing\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"profileCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPublished\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"verificationStatus\",\"kind\":\"enum\",\"type\":\"VerificationStatus\"},{\"name\":\"verificationChecklist\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"submittedDocuments\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"verificationSubmittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verificationReviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verificationApprovedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verificationRejectedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verificationNotes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"verificationRequirements\",\"kind\":\"object\",\"type\":\"VerificationRequirement\",\"relationName\":\"VerificationRequirementToWorkerProfile\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"worker_profiles\"},\"VerificationRequirement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workerProfileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workerProfile\",\"kind\":\"object\",\"type\":\"WorkerProfile\",\"relationName\":\"VerificationRequirementToWorkerProfile\"},{\"name\":\"requirementType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requirementName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRequired\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"RequirementStatus\"},{\"name\":\"documentUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"documentUploadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"reviewedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"reviewedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"approvedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"rejectedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rejectionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_requirements\"},\"ClientProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClientProfileToUser\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mobile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"client_profiles\"},\"CoordinatorProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CoordinatorProfileToUser\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mobile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organization\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"coordinator_profiles\"},\"AuditLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"AuditAction\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuditLogToUser\"}],\"dbName\":\"audit_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    AUTH_DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['AUTH_DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.AUTH_DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

